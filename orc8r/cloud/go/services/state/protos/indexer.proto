/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package magma.orc8r.state;

import "orc8r/protos/service303.proto";
import "orc8r/protos/state.proto";

option go_package = "protos";

// Indexer servicer provides methods for managing a service's indexer.
service Indexer {
  // GetIndexerInfo gets info about this indexer.
  rpc GetIndexerInfo(GetIndexerInfoRequest) returns (GetIndexerInfoResponse) {}

  // Index a set of states by forwarding to locally-registered indexers.
  rpc Index(IndexRequest) returns (IndexResponse) {}

  // PrepareReindex of a particular indexer.
  rpc PrepareReindex(PrepareReindexRequest) returns (PrepareReindexResponse) {}

  // CompleteReindex of a particular indexer.
  rpc CompleteReindex(CompleteReindexRequest) returns (CompleteReindexResponse) {}
}

message GetIndexerInfoRequest {}

message GetIndexerInfoResponse {
  // version of the indexer's current implementation
  uint32 version = 1;
  // state_types is the type of states the indexer will index
  // utilized for pre-filtering
  repeated string state_types = 2;
}

message IndexRequest {
  // states to reindex
  repeated magma.orc8r.State states = 1;
  // network_id of the states
  string network_id = 2;
  // reporter_hwid is the hwid of the gateway that reported the states
  string reporter_hwid = 3;
}

message IndexResponse {
  // state_errors are errors experienced trying to index specific pieces of state.
  repeated magma.orc8r.IDAndError state_errors = 1;
}

message PrepareReindexRequest {
  // indexer_id being reindexed
  string indexer_id = 1;
  // from_version is the indexer's current (actual) version
  uint32 from_version = 2;
  // to_version is the indexer's future (desired) version
  uint32 to_version = 3;
  // is_first is true iff this is the first time this indexer is being reindexed
  bool is_first = 4;
}

message PrepareReindexResponse {}

message CompleteReindexRequest {
  // indexer_id being reindexed
  string indexer_id = 1;
  // from_version is the indexer's current (actual) version
  uint32 from_version = 2;
  // to_version is the indexer's future (desired) version
  uint32 to_version = 3;
}

message CompleteReindexResponse {}

